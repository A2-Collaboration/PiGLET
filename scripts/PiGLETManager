#!/usr/bin/perl
use strict;
use warnings;

#use Data::TreeDumper;
use Getopt::Long;
use Pod::Usage;
use Switch;
use Net::Telnet;
use Module::Load;
use threads;


# define the display sets $dispsets here
# as a hashref, the key is the "name" of the dispset
# please provide a meaningful description of the displayset,

my $dispsets = {};

# define display sets

$dispsets->{Test} =
  {
   'Description' => 'Messing around on localhost...',
   'Displays' => [
                  {
                   'Hostname' => 'localhost',
                   'Windows' => [
                                 {
                                  Type=>'Plot', 'Name'=>'MyTestRecord0', 'BackLength'=>600},
                                 {
                                  Type=>'Plot', 'Name'=>'MyTestRecord1', 'BackLength'=>100},
                                 {
                                  Type=>'Image', 'Name'=>'Webcam',
                                  Crop=>[260, 280, 75, 125],
                                  Crosshair=>[100, 100, 30]
                                 }
                                ]
                  }
                 ]
  };

$dispsets->{EPT} =
  {
   'Description' => 'For EPT Measurements',
   'Displays' => [
                  {
                   'Hostname' => 'a2onlinedisplay-00',
                   'Windows' => [
                                 {Type=>'Image', Name=>'EPT_Radiator',
                                  Crop=>[280, 250, 150, 150],
                                  #Crosshair=>[0, 0, 0],
				  Rectangle=>[130, 122, 20],
                                  URL=>'http://a2radiator1.online.a2.kph/free.jpg'},
		                 #{Type=>'Image', Name=>'Tagger_Radiator',
                                  #Crop=>[260, 280, 75, 125],
                                  #Crosshair=>[0, 0, 0],
				  #Rectangle=>[120, 80, 37],
                                  #URL=>'http://a2radiator2.online.a2.kph/free.jpg'},
                                 {Type=>'Plot',  Name=>'GEN:MON:EventsWithError', 'BackLength'=>900},
                                 {Type=>'Plot',  Name=>'GEN:MON:Runfilesize', 'BackLength'=>900}
                                ]
                  },
                  {
                   'Hostname' => 'a2onlinedisplay-01',
                   'Windows' => [
                                 {Type=>'Plot',  Name=>'TRIG:Trigger', 'BackLength'=>900},
                                 {Type=>'Plot',  Name=>'TRIG:TotalLivetime', 'BackLength'=>900},
                                 {Type=>'Plot',  Name=>'TRIG:MeanReadoutTime', 'BackLength'=>900}
                                ]
                  },
                  {
                   'Hostname' => 'a2onlinedisplay-02',
                   'Windows' => [
                                 {Type=>'Plot',  Name=>'BEAM:FaradayCup', 'BackLength'=>900},
                                 {Type=>'Plot',  Name=>'BEAM:PBGlass', 'BackLength'=>900},
                                 {Type=>'Plot',  Name=>'BEAM:IonChamber', 'BackLength'=>900},
                                 {Type=>'Plot',  Name=>'TAGG:EPT:LadderP2Ratio', 'BackLength'=>900}
                                ]
                  },
                  {
                   'Hostname' => 'a2onlinedisplay-03',
                   'Windows' => [
                                 {Type=>'Plot',  Name=>'TAGG:EPT:Sector0:TRIG:OR', 'BackLength'=>900},
                                 {Type=>'Plot',  Name=>'TAGG:EPT:Sector1:TRIG:OR', 'BackLength'=>900},
                                 {Type=>'Plot',  Name=>'TAGG:EPT:Sector2:TRIG:OR', 'BackLength'=>900},
                                 {Type=>'Plot',  Name=>'TAGG:EPT:Sector3:TRIG:OR', 'BackLength'=>900}
                                ]
                  },
                  {
                   'Hostname' => 'a2onlinedisplay-04',
                   'Windows' => [
                                 {Type=>'Plot',  Name=>'CB:MWPC:HV:CH1:CURR:READ', 'BackLength'=>900},
                                 {Type=>'Plot',  Name=>'CB:MWPC:HV:CH1:VOLT:READ', 'BackLength'=>900},
                                 {Type=>'Plot',  Name=>'CB:MWPC:HV:CH2:CURR:READ', 'BackLength'=>900},
                                 {Type=>'Plot',  Name=>'CB:MWPC:HV:CH2:VOLT:READ', 'BackLength'=>900}
                                ]
                  },
                  {
                   'Hostname' => 'a2onlinedisplay-05',
                   'Windows' => [
                                 {Type=>'Plot',  Name=>'TRIG:ImmediateReset', 'BackLength'=>900},
                                 {Type=>'Plot',  Name=>'TRIG:L1_Trigger', 'BackLength'=>900},
                                 {Type=>'Plot',  Name=>'TRIG:FastClear', 'BackLength'=>900},
                                 {Type=>'Plot',  Name=>'TAGG:TAGG:ReferenceOR', 'BackLength'=>900}
                                ]
                  },
                  {
                   'Hostname' => 'a2onlinedisplay-06',
                   'Windows' => [
                                 {Type=>'Plot',  Name=>'TRIG:MULT:M1', 'BackLength'=>900},
                                 {Type=>'Plot',  Name=>'TRIG:MULT:M2', 'BackLength'=>900},
                                 {Type=>'Plot',  Name=>'TRIG:MULT:M3', 'BackLength'=>900},
                                 {Type=>'Plot',  Name=>'TRIG:MULT:M4Plus', 'BackLength'=>900}
                                ]
                  },
                  {
                   'Hostname' => 'a2onlinedisplay-07',
                   'Windows' => [
                                 {Type=>'Plot', Name=>'TRIG:COPL:TriggerCharged', 'BackLength'=>900},
                                 {Type=>'Plot', Name=>'TRIG:COPL:Trigger', 'BackLength'=>900}
                                ]
                  },
                  {
                   'Hostname' => 'a2onlinedisplay-08',
                   'Windows' => [
                                 {Type=>'Plot', Name=>'TRIG:Debug0', 'BackLength'=>900},
                                 {Type=>'Plot', Name=>'TRIG:Debug1', 'BackLength'=>900},
                                 {Type=>'Plot', Name=>'TRIG:Debug2', 'BackLength'=>900},
                                 {Type=>'Plot', Name=>'TRIG:Debug3', 'BackLength'=>900}
                                ]
                  },
                  {
                   'Hostname' => 'a2onlinedisplay-09',
                   'Windows' => [
                                 {Type=>'Plot', Name=>'CB:CB:TRIG:ESum_Low', 'BackLength'=>900},
                                 {Type=>'Plot', Name=>'CB:CB:TRIG:ESum_High', 'BackLength'=>900}
                                ]
                  },
                  {
                   'Hostname' => 'a2onlinedisplay-10',
                   'Windows' => [
                                 {Type=>'Plot', Name=>'TAPS:TRIG:InternalTrigger', 'BackLength'=>900},
                                 {Type=>'Plot', Name=>'TRIG:TAPS:TriggerLivetimeStandalone',   'BackLength'=>900},
                                 {Type=>'Plot', Name=>'TAPS:TRIG:TotalLivetime', 'BackLength'=>900}
                                ]
                  },
                  {
                   'Hostname' => 'a2onlinedisplay-11',
                   'Windows' => [
                                 {Type=>'Plot', Name=>'TAPS:BAF:TRIG:LED1:OR', 'BackLength'=>900},
                                 {Type=>'Plot', Name=>'TAPS:BAF:TRIG:LED2:M2Plus',   'BackLength'=>900},
                                 {Type=>'Plot', Name=>'TAPS:BAF:TRIG:CFD:OR',   'BackLength'=>900},
                                 {Type=>'Plot', Name=>'TAPS:VETOBAF:TRIG:OR',   'BackLength'=>900}
                                ]
                  }
                 ]
  };
$dispsets->{Standard} =
  {
   'Description' => 'Counting Room Standard',
   'Displays' => [
                  {
                   'Hostname' => 'a2onlinedisplay-00',
                   'Windows' => [
                                 {Type=>'Image', Name=>'Radiator',
                                  Crop=>[260, 280, 75, 125],
                                  Crosshair=>[0, 0, 0],
				  Rectangle=>[120, 80, 37],
                                  URL=>'http://a2radiator2.online.a2.kph/free.jpg'},
                                 {Type=>'Plot',  Name=>'GEN:MON:EventsWithError', 'BackLength'=>900},
                                 {Type=>'Plot',  Name=>'GEN:MON:Runfilesize', 'BackLength'=>900}
                                ]
                  },
                  {
                   'Hostname' => 'a2onlinedisplay-01',
                   'Windows' => [
                                 {Type=>'Plot',  Name=>'TRIG:Trigger', 'BackLength'=>900},
                                 {Type=>'Plot',  Name=>'TRIG:TotalLivetime', 'BackLength'=>900}
                                ]
                  },
                  {
                   'Hostname' => 'a2onlinedisplay-02',
                   'Windows' => [
                                 {Type=>'Plot',  Name=>'BEAM:FaradayCup', 'BackLength'=>900},
                                 {Type=>'Plot',  Name=>'BEAM:PBGlass', 'BackLength'=>900},
                                 {Type=>'Plot',  Name=>'BEAM:IonChamber', 'BackLength'=>900}
                                ]
                  },
                  {
                   'Hostname' => 'a2onlinedisplay-03',
                   'Windows' => [
                                 {Type=>'Plot',  Name=>'TAGG:TAGG:ReferenceOR', 'BackLength'=>900},
                                 {Type=>'Plot',  Name=>'BEAM:CBREM:Edge', 'BackLength'=>3600},
                                 {Type=>'Plot',  Name=>'TAGG:TAGG:LadderP2Ratio', 'BackLength'=>900}
                                ]
                  },
                  {
                   'Hostname' => 'a2onlinedisplay-04',
                   'Windows' => [
                                 {Type=>'Plot',  Name=>'CB:MWPC:HV:CH1:CURR:READ', 'BackLength'=>900},
                                 {Type=>'Plot',  Name=>'CB:MWPC:HV:CH1:VOLT:READ', 'BackLength'=>900},
                                 {Type=>'Plot',  Name=>'CB:MWPC:HV:CH2:CURR:READ', 'BackLength'=>900},
                                 {Type=>'Plot',  Name=>'CB:MWPC:HV:CH2:VOLT:READ', 'BackLength'=>900}
                                ]
                  },
                  {
                   'Hostname' => 'a2onlinedisplay-05',
                   'Windows' => [
                                 {Type=>'Plot',  Name=>'TRIG:ImmediateReset', 'BackLength'=>900},
                                 {Type=>'Plot',  Name=>'TRIG:L1_Trigger', 'BackLength'=>900},
                                 {Type=>'Plot',  Name=>'TRIG:FastClear', 'BackLength'=>900}
                                ]
                  },
                  {
                   'Hostname' => 'a2onlinedisplay-06',
                   'Windows' => [
                                 {Type=>'Plot',  Name=>'TRIG:MULT:M1', 'BackLength'=>900},
                                 {Type=>'Plot',  Name=>'TRIG:MULT:M2', 'BackLength'=>900},
                                 {Type=>'Plot',  Name=>'TRIG:MULT:M3', 'BackLength'=>900},
                                 {Type=>'Plot',  Name=>'TRIG:MULT:M4Plus', 'BackLength'=>900}
                                ]
                  },
                  {
                   'Hostname' => 'a2onlinedisplay-07',
                   'Windows' => [
                                 {Type=>'Plot', Name=>'TRIG:COPL:TriggerCharged', 'BackLength'=>900},
                                 {Type=>'Plot', Name=>'TRIG:COPL:Trigger', 'BackLength'=>900}
                                ]
                  },
                  {
                   'Hostname' => 'a2onlinedisplay-08',
                   'Windows' => [
                                 {Type=>'Plot', Name=>'TRIG:Debug0', 'BackLength'=>900},
                                 {Type=>'Plot', Name=>'TRIG:Debug1', 'BackLength'=>900},
                                 {Type=>'Plot', Name=>'TRIG:Debug2', 'BackLength'=>900},
                                 {Type=>'Plot', Name=>'TRIG:Debug3', 'BackLength'=>900}
                                ]
                  },
                  {
                   'Hostname' => 'a2onlinedisplay-09',
                   'Windows' => [
                                 {Type=>'Plot', Name=>'CB:CB:TRIG:ESum_Low', 'BackLength'=>900},
                                 {Type=>'Plot', Name=>'CB:CB:TRIG:ESum_High', 'BackLength'=>900}
                                ]
                  },
                  {
                   'Hostname' => 'a2onlinedisplay-10',
                   'Windows' => [
                                 {Type=>'Plot', Name=>'TAPS:TRIG:InternalTrigger', 'BackLength'=>900},
                                 {Type=>'Plot', Name=>'TRIG:TAPS:TriggerLivetimeStandalone',   'BackLength'=>900},
                                 {Type=>'Plot', Name=>'TAPS:TRIG:TotalLivetime', 'BackLength'=>900}
                                ]
                  },
                  {
                   'Hostname' => 'a2onlinedisplay-11',
                   'Windows' => [
                                 {Type=>'Plot', Name=>'TAPS:BAF:TRIG:LED1:OR', 'BackLength'=>900},
                                 {Type=>'Plot', Name=>'TAPS:BAF:TRIG:LED2:M2Plus',   'BackLength'=>900},
                                 {Type=>'Plot', Name=>'TAPS:BAF:TRIG:CFD:OR',   'BackLength'=>900},
                                 {Type=>'Plot', Name=>'TAPS:VETOBAF:TRIG:OR',   'BackLength'=>900}
                                ]
                  }
                 ]
  };


# some default config options
# and provide nice help documentation
# some global variables, needed everywhere

my $man = 0;
my $help = 0;
my $verbose = 0;
my $warnings = 1;
my $exact = 0;
my $dispsetfile;
my $t; # telnet connection
my $SSH; # SSH connection for "do" mode

Getopt::Long::Configure(qw(gnu_getopt));
GetOptions(
           'help|h' => \$help,
           'man' => \$man,
           'verbose|v+' => \$verbose,
           'warnings|w!' => \$warnings,
           'exact|e+' => \$exact,
           'dispsetfile|d=s' => \$dispsetfile
          ) or pod2usage(2);
pod2usage(1) if $help;
pod2usage(-exitval => 0, -verbose => 2) if $man;

if ($verbose) {
  # always enable warnings if verbose
  $warnings = 1;
}

# this loads some additional dispsets
&LoadDispsetfile;


# jump to subroutine which handles the job,
# depending on the options
my $mode = shift @ARGV || "";

switch($mode) {
  case "activate" { &Activate; }
  case "do" { &Do; }
  case "list" { &List; }
  else {
    Logger("Supplied mode not recognized, try --help or --man");
  }
}

sub Activate {
  my $dispset = $ARGV[0] || "";
  Logger("Specified dispset $dispset not found")
    unless defined $dispsets->{$dispset};

  Logger("Can't be that exact!")
    if $exact>3;
  Logger("Activating display set $dispset",1);
  # define a shortcut to the actual dispset data
  my $d = $dispsets->{$dispset};

  my @threads = map { threads->create(\&WorkOnDisplay, $_) } @{$d->{Displays}};
  $_->join for @threads;

  Logger("Display set $dispset activated.",1);
}

sub Do {
  load Net::OpenSSH;
  # use shift to keep in the rest of @ARGV the cmd and its arguments
  my $dispset = shift @ARGV || "";
  my $cmd = join(" ", @ARGV);

  # some simple logic to catch the ALL keyword properly
  # and init the necessary SSH connections
  if ($dispset eq 'ALL') {
    foreach my $dispset (keys $dispsets) {
      InitSSH($dispsets->{$dispset})
    }
  } else {
    Logger("Specified dispset not found") unless $dispsets->{$dispset};
    InitSSH($dispsets->{$dispset})
  }

  # in $SSH all hosts are initialized,
  # now execute the given command
  my $pid;
  foreach my $host (keys $SSH) {
    my $ssh = $SSH->{$host};
    # the perl pipe formats the output (prepends the hostname)
    $pid->{$host} = $ssh->system({async=>1},
                                 "$cmd 2>&1".
                                 " | perl -pe 'chomp(\$h=`hostname -s`); printf(\"%-17s %s\",\$h);'");
  }

  # Wait and check result
  my @failed_hosts = WaitForPIDs($pid);
  if (@failed_hosts) {
    Logger("The command could not be executed on ".join(" ", @failed_hosts), -1)
  }
}


sub List {
  print "The following display sets are available:\n";
  foreach my $dispset (sort keys $dispsets) {
    printf("* %-10s\t%s\n",$dispset,,$dispsets->{$dispset}->{Description});
  }
}



# helper functions

sub WaitForPIDs {
  my $pid = shift;
  # wait until all SSH commands have been executed
  # and check exit code
  my $failed = {};
  foreach my $host (keys $pid) {
    waitpid($pid->{$host},0);
    # transform to original exit value, see perlvar $?
    $failed->{$host} = $? >> 8 if $?;
  }
  if (wantarray()) {
    return keys $failed;
  } else {
    return $failed;
  }
}


sub InitSSH {
  my $dispset = shift;
  Logger("Initializing SSH connections in parallel...",2);
  foreach my $d (@{$dispset->{Displays}}) {
    my $host = $d->{Hostname};
    # check if there is already a connection
    next if exists $SSH->{$host};
    Logger("Opening connection to $host",3);
    # open the ssh connections for each host
    $SSH->{$host} = Net::OpenSSH->new($host, async => 1);
  }
}


sub LoadDispsetfile {
  return unless defined $dispsetfile;
  do $dispsetfile or Logger("Can't load dispsetfile $dispsetfile: $!",-1);
}


sub WorkOnDisplay {
  my $disp = shift;
  my $host = $disp->{Hostname};
  Logger("$host: Opening connection",2);

  $t = Net::Telnet->new(Timeout => 10, Port => 1337);
  $t->errmode("return");

  $t->open($host)
    or Logger("$host: Cannot open telnet connection: ".$t->errmsg);

  $t->waitfor(String => 'Welcome to PiGLET!')
    or Logger("$host: Did not receive welcome message: ".$t->errmsg);

  Logger("$host: Successfully connected.",2);

  # get the current windows via the List command.
  # search for words ending in _Remove, which
  # indicate the unique name of each window
  $t->print('List') or
    Logger("$host: Cannot send List command: ".$t->errmsg);
  $t->waitfor(String => 'Available commands:') or
    Logger("$host: Did not receive list of windows: ".$t->errmsg);
  my @words = split(/\s+/,$t->lastline);
  my %wins =
    map { s/(.+)_Remove/$1/ ? ($_ => 1) : () } @words;

  my $n = scalar keys %wins;
  my $n_exp = scalar @{$disp->{Windows}};
  Logger("$host: Currently $n windows active, $n_exp in display set.",2);

  if($exact==3) {
    Logger("$host: Removing all windows.",2);
    ExecCmd("RemoveAllWindows");
  }

  # let's check if it complies with the display set
  foreach my $win (@{$disp->{Windows}}) {
    my $name = $win->{Name}; # unique identier for windows
    if($exact==3 || !exists $wins{$name}) {
      Logger("$host: Window $name not found. Adding it.", 2);
      my $type = $win->{Type}; # Plot, Image, ...?
      ExecCmd("Add${type}Window $name");
      SetWindowProperties($win);
    }
    elsif($exact>=1) { # equals $exact==1 || $exact==2
      # ensure correct properties
      SetWindowProperties($win);
    }
    delete $wins{$name};
  }

  # remove "unknown" windows
  if($exact == 2) {
    foreach my $name (keys %wins) {
      Logger("$host: Removing unknown window $name", 2);
      ExecCmd("${name}_Remove");
    }
  }
}

sub SetWindowProperties {
  my $win = shift;
  my $host = $t->host;
  my $name = $win->{Name};
  foreach my $prop (keys $win) {
    # skip "special" properties
    next if $prop eq 'Name';
    next if $prop eq 'Type';
    my $val = $win->{$prop};
    # if the value is an arrayref, join all
    # values to a space-separated string
    if (ref $val eq 'ARRAY') {
      $val = join(' ',@$val);
    }
    Logger("$host: Setting ${name}_$prop to $val.", 2);
    ExecCmd("${name}_$prop $val");
  }
}

sub ExecCmd {
  my $host = $t->host;
  my $cmd = shift;
  #$t->dump_log('STDERR');
  $t->print($cmd) or
    Logger("$host: Cannot send Cmd '$cmd': ".$t->errmsg);
  my $patt = '/(Ok.|Error:)/';
  $t->waitfor($patt) or
    Logger("$host: Did not receive 'Ok.' or 'Error:' after '$cmd': ".$t->errmsg);
  if($t->lastline =~ /Error:/) {
    Logger("Cmd '$cmd' was not successful: ".$t->lastline);
  }
}

sub Logger {
  my $msg = shift;
  my $lvl = shift || 0; # 0=fatal, -1=warning, >0 verbose messages

  if ($lvl==0) {
    print STDERR "Error: $msg\n";
    exit 1;
  }
  elsif($lvl==-1) {
    print STDERR "Warning: $msg\n" if $warnings;
  }
  else {
    print "$msg\n" if $lvl<=$verbose;
  }
}

__END__

=head1 NAME

PiGLETManager - Interface to PiGLET (Raspberry Pi OpenGL EPICS Toolkit)

=head1 SYNOPSIS

PiGLETManager activate <displayset>

PiGLETManager do <displayset|ALL> <command>

PiGLETManager list

 Options:
   -h, --help         brief help message
   -v, --verbose      be verbose to STDERR
   -w, --warnings     print warnings to STDERR
   -e, --exact        set display more precisely
   -d, --dispsetfile  load extra display sets

=head1 OPTIONS

=over 8

=item B<--help>

Print a brief help message and exits.

=item B<--verbose>

Print some information what is going on. Default off.

=item B<--warnings>

Print warnings (or "not-so-fatal" errors). Default on.

=item B<--exact>

If specified once, the BackLength's are reset even if the window
exists.

If specified twice (e.g. -ee), then additionally unknown windows are
removed.

If specified three times (e.g. -eee), everything is removed and added
from scratch. Note: This also deletes the history of the graphs and
reloads the metadata like yrange from EPICS.

=item B<--dispsetfile>

Load more dispsets from the specified file. It must be valid PERL
syntax which extends or modifies the hashref $dispsets, see the
beginning of the source code of PiGLETManager how the default dispsets
are defined.


=back

=head1 DESCRIPTION

=cut
